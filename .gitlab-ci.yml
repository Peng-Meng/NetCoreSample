stages:
  - build
  - deploy
# 构建
helloapi-build-job:
  stage: build
  image: mcr.microsoft.com/dotnet/core/sdk:3.1
  only:
    - master
  cache:
    untracked: true
  script:
    #- cd helloApi
    #- dotnet restore
    #- dotnet publish -o ../out -c Release
    #- cd ../
    # 构建网关
    #- cd CoreService/User.Api/API.Gateway
    #- dotnet restore
    #- dotnet publish -o ../../../out/gateway -c Release
    #- cd ../../../
    # UserApi
    - cd CoreService/User.Api/User.Api
    - dotnet restore
    - dotnet publish -o ../../../out/userapi -c Release
    - cd ../../../
    
    
    
  artifacts:
    # 可以缓存在gitlab的流水线记录中，供直接下载
    expire_in: 30 days
    paths:
      - out/
      - out/gateway
      - out/userapi
  tags:
    - helloapi-build
# 发布正式
helloapi-deploy-job:
  stage: deploy
  only:
    - master
  dependencies:
    - helloapi-build-job  # 这里一定要依赖build-job，不然dockerfile里面的out目录无法使用
  script:
    #- sh ./helloApi/helloApi/check-images.sh
    #- docker build -f ./helloApi/helloApi/Dockerfile -t helloapi .
    #- docker run -d --name helloapi  -p 5021:80 helloapi
      # 网关
    #- sh ./CoreService/User.Api/API.Gateway/check-images.sh
    #- docker build -f ./CoreService/User.Api/API.Gateway/Dockerfile -t gateway .
    #- docker run -d --name gateway  -p 81:81 gateway
      #userApi
    - sh ./CoreService/User.Api/User.Api/check-images.sh
    - docker build -f ./CoreService/User.Api/User.Api/Dockerfile -t userapi .
    - docker run -d --name userapi  -p 82:80 userapi
  tags:
    - helloapi-deploy
